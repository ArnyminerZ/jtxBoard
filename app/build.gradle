/*
 * Copyright (c) Techbee e.U.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 */

apply plugin: 'com.android.application'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'


android {
    namespace 'at.techbee.jtx'
    compileSdkVersion 32
    defaultConfig {
        applicationId "at.techbee.jtx"
        buildConfigField "long", "buildTime", System.currentTimeMillis() + "L"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 101010009
        versionName "1.01.01-rc09"      // keep -release as a suffix also for release, build flavor adds the suffix e.g. .gplay (e.g. 1.00.00-rc0.gplay)
        buildConfigField "String", "versionCodename", "\"Stop Putin's terror!\""
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // see https://developer.android.com/studio/write/java8-support
        kotlinOptions {
            jvmTarget = "1.8"
        }
        testOptions {
            unitTests.includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
        // defining the room.schemaLocation explicitly allows AutoMigrations
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        // uncomment to test minifyEnabled without signing the package
        debug {
            //minifyEnabled = true
            //shrinkResources = true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Enables data binding.
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/*.md']
            pickFirsts += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    //necessary for ical4j

    flavorDimensions 'version'
    productFlavors {
        gplay {
            dimension 'version'
            versionNameSuffix '.gplay'
        }
        huawei {
            dimension 'version'
            versionNameSuffix '.huawei'
        }
        ose {
            dimension 'version'
            versionNameSuffix '.ose'
        }
    }

    // the flavor alphatest should not be used for the build type release, we filter this here
    variantFilter { variant ->
        if (variant.flavors*.name.contains("alphatest") && variant.buildType.name == "release") {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs, this is especially necessary to use java.time for versions < O
        // https://developer.android.com/studio/write/java8-support#library-desugaring
        // also good for ical4android
        coreLibraryDesugaringEnabled = true
    }
    lint {
        disable 'MissingTranslation'
    }
}

aboutLibraries {
    additionalLicenses {
        mpl_2_0
    }
}


dependencies {

    implementation project(':ical4android')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Support libraries
    implementation "androidx.constraintlayout:constraintlayout:$version_constraint_layout"

    // Android KTX
    implementation "androidx.core:core-ktx:$version_core"

    // Room and Lifecycle dependencies
    implementation "androidx.room:room-runtime:$version_room"
    implementation "androidx.appcompat:appcompat:$version_appcompat"
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    kapt "androidx.room:room-compiler:$version_room"
    implementation "androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutine"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$version_navigation"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$version_lifecycle"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$version_room"

    // Material.io
    implementation "com.google.android.material:material:$version_material"

    implementation "androidx.preference:preference-ktx:1.2.0"

    // Volley for simple network requests
    implementation("com.android.volley:volley:1.2.1")

    // Google billing
    gplayImplementation "com.android.billingclient:billing-ktx:$version_billing"

    // Google request for review
    gplayImplementation "com.google.android.play:review:$version_review"
    gplayImplementation "com.google.android.play:review-ktx:$version_review"


    // Huawei Ads Lite (works only on Huawei phones)
    huaweiImplementation "com.huawei.hms:ads:3.4.49.301"    // should be replaced by ads-lite when it can be tested with a huawei phone
    //implementation "com.huawei.hms:ads-lite:13.4.49.301"
    huaweiImplementation "com.huawei.hms:ads-consent:3.4.49.301"

    // Workmanager support
    implementation("androidx.work:work-runtime-ktx:$version_work")

    //support for java.time for older Android versions (<O)
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")

    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0-alpha06'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$version_coroutine"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Testing-only dependencies
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
    androidTestImplementation 'androidx.test:core-ktx:1.4.1-alpha06'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.room:room-testing:$version_room"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.test:core-ktx:1.4.1-alpha06'
    // Required -- JUnit 4 framework
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation("org.mockito:mockito-core:3.9.0")


    //Fragment Testing
    debugImplementation('androidx.fragment:fragment-testing:1.4.1') {
        // exclude androidx.test:core while fragment_testing depends on 1.1.0
        exclude group: 'androidx.test', module: 'core'
    }

    // Testing for Workmanager
    androidTestImplementation("androidx.work:work-testing:$version_work")

    //About Libraries
    implementation "com.mikepenz:aboutlibraries:8.9.4"

    // Markwon for markdown support
    implementation  "io.noties.markwon:core:$version_markwon"
    implementation  "io.noties.markwon:ext-strikethrough:$version_markwon"
    implementation  "io.noties.markwon:editor:$version_markwon"

    // Color Picker
    implementation 'com.larswerkman:HoloColorPicker:1.5'
}

